<?php
/**
 * 回顾真题
 *      请写出下面MySQL数据库类型表达的意义(int(0)、char(16)、varchar(16)、datetime、text)
 *      int(0) : 整型，宽度是0位
 *      char(16):定长字符串，字符串长度是16位
 *      varchar(16):可变长度字符串，长度也是16位
 *      datetime: 保存时间日期
 *      text:存储字符串类型，常用于存储大类型文本
 *
 *
 * 考官考点
 *      MySQL数据类型
 *      延伸：MySQL基础操作
 *      延伸：MySQL存储引擎
 *      延伸：MySQL锁机制
 *      延伸：MySQL事务处理、存储过程、触发器
 *
 * MySQL数据类型
 *      整数类型
 *          TINYINT SMALLINT  MEDIUMINT  INT  BIGINT
 *          属性：UNSIGNED
 *          长度：可以为整数类型指定宽度，例如：INT(11)、对大多数应用是没有意义的，
 *                它不会限制值的合法范围，只会影响显示字符的个数。
 *      实数类型
 *          FLOAT  DOUBLE  DECIMAL
 *          DECIMAL可存储比BIGINT还大的整数；可以用于存储精确的小数
 *          FLOAT和DOUBLE类型支持使用标准的浮点进行近似计算
 *      字符串类型
 *          VARCHAR  CHAR  TEXT  BLOB
 *          VARCHAR类型用于存储可变长字符串，它比定长类型更节省空间
 *          VARCHAR使用1或2个额外字节纪录字符串的长度，列长度小于255字节，使用1个字节表示，否则用2个
 *          VARCHAR长度，如果存储内容超出指定长度，会被截断
 *          CHAR是定长的，根据定义的字符串长度分配足够的空间
 *          CHAR会根据需要采用空格进行填充以方便比较
 *          CHAR适合存储很短的字符串，或者所有值都接近同一个长度
 *          CHAR长度，超出设定的长度，会被截断
 *          对于经常变更的数据，CHAR比VARCHAR更好，CHAR不容易产生碎片
 *          只分配真正需要的空间，更长的列会消耗更多的内存
 *          尽量避免使用BLOB/TEXT类型，查询会使用临时表，导致严重的性能开销
 *      枚举
 *          有时可以使用枚举代替常用的字符串类型
 *          把不重复的集合存储成一个预定义的集合
 *          非常紧凑，把列表值压缩到一个或两个字节
 *          内部存储的是整数
 *          尽量避免使用数字作为ENUM枚举的常量，易混乱
 *          排序是按照内部存储的整数进行排序
 *          枚举表会使表大小大大减小
 *      日期和时间类型
 *          尽量使用TIMESTAMP,比DATETIME空间效率高
 *          用整数保存时间戳的格式通常不方便处理
 *          如果需要存储微妙，可以使用bigint存储
 *      列属性
 *          auto_increment  default   not null   zerofill
 *      (重点  char和varchar的区别)
 *
 *
 * 延伸考点：MySQL基础操作
 *      常规操作
 *          MySQL的链接和关闭：mysql -u -p -h -P    用户名  密码  主机  端口
 *          其他：\G  把打印结果垂直显示   \c 取消当前mysql命令
 *                \q  退出mysql            \s 显示mysql的服务器状态
 *                \h  帮助信息             \d  改变执行服务
 *
 * 延伸考点：MySQL数据表引擎
 *      InnoDB表引擎
 *          默认事务型引擎，最重要最广泛的存储引擎，性能非常优秀
 *          数据存储在共享表空间，可以通过配置分开
 *          对主键查询的性能高于其他类型的存储引擎
 *          内部做了很多优化，从磁盘读取数据时自动在内存构建hash索引，插入数据时自动构建插入缓冲区
 *          通过一些机制和工具支持真正的热备份
 *          支持崩溃后的安全恢复
 *          支持行级锁
 *          支持外键
 *      MyISAM表引擎
 *          5.1版本前，MyISAM是默认的存储引擎
 *          拥有全文索引、压缩、空间函数
 *          不支持事务和行级锁，不支持崩溃后的安全恢复
 *          表存储在两个文件，MYD和MYI
 *          设计简单，某些场景下性能很好
 *      其他表引擎
 *          Archive、Blackhole、CSV、Memory
 *          优先选择InnoDB
 *
 * 延伸考点：MySQL锁机制
 *      基础概念
 *          表锁是日常开发中常见的问题，因此也是面试当中最常见的考察点，
 *          ，当多个查询同一时刻进行数据修改时，就会产生并发控制的问题。
 *         共享锁和排它锁，其实就是读锁和写锁
 *      读锁
 *          共享的，不堵塞，多个用户可以同时读一个资源，互不干扰
 *      写锁
 *          排他的，一个写锁会阻塞其他的写锁和读锁，这样可以只允许一个人进行写入
 *          ，防止其他用户读取正在写入的资源。
 *      锁粒度
 *          表锁，系统性能开销最小，会锁定整张表，MyISAM使用表锁
 *          行锁，最大程度地支持并发处理，但是也带来了最大的锁开销，InnnDB实现行级锁
 *
 * 延伸考点：MySQL事务处理
 *      事务处理
 *          MySQL提供事务处理的表引擎，InnoDB
 *          服务器层不管理事务，由下层的引擎实现，所以同一个事务中，使用多种存储引擎不靠谱
 *          在非事务的表上执行事务操作MySQL不会发出提醒，也不会报错
 *
 * 延伸考点：MySQL存储过程
 *      存储过程
 *          为以后的使用而保存一条或多条MySQL语句的集合
 *          存储过程就是有业务逻辑和流程的集合
 *          可以在存储过程中创建表，更新数据，删除等等
 *      使用场景
 *          通过把处理封装在容易使用的单元中，简化复杂的操作
 *          保证数据的一致性
 *          简化对变动的管理
 *
 * 延伸考点：MySQL触发器
 *      触发器
 *          提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程
 *      使用场景
 *          可通过数据库中的相关表实现级联更改
 *          实时监控某张表中的某个字段的更改而需要做出相应的处理
 *          某些业务编号的生成等
 *          滥用会造成数据库及应用程序的维护困难
 *
 * 解题方法
 *      牢记以上基础知识点，理解数据类型CHAR和VARCHAR的差异，表存储引擎InnoDB和MyISAM的区别
 *
 * 一网打尽
 *      请说明表引擎InnoDB和MyISAM的区别
 *      InnoDB                   MyISAM
 *      支持行锁                 支持表锁
 *      支持事务处理             不支持事务处理
 *      默认使用共享表空间       不使用共享表空间
 *      存储在共享表空间         数据保存在.MYD文件，索引.MYI文件中
 *      ...
 *
 *
 *
 *
 *
 */


