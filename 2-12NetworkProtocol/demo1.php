<?php
/**
 * 回顾真题
 *      HTTP/1.1中，状态码 200 301 304 403 404 500的含义
 *
 * 考点
 *      HTTP协议状态码
 *      延伸：OSI七层模型
 *      延伸：HTTP协议的工作特点和工作原理
 *      延伸：HTTP协议常见请求/响应头和请求方法
 *      延伸：HTTPS协议的工作原理
 *      延伸：常见网络协议含义及端口
 *
 * HTTP协议状态码
 *      五类响应：
 *          1XX: 信息类状态码，表示接受的请求正在处理
 *          2XX：success成功状态码，请求正常处理完毕
 *          3XX：redirection重定向，需要进行附加操作以完成请求
 *          4XX：client Error 客户端错误，服务器无法处理请求
 *          5XX：server Error 服务器错误，服务器处理请求时出错
 *      常见状态码：
 *          200：OK,在服务器端请求被正常处理
 *          204：no content(无内容)请求被正常处理，但返回的响应报文中不含实体的主体部分
 *          206：partial content 服务端成功处理了部分Get请求
 *          301：moved permanently(永久性重定向) 被请求的资源已永久移动到新位置，以后因使用资源现在所指的URL
 *          302：Move temporarily(临时移动)资源被放到新的URI，希望用户本次使用新的URI进行访问
 *          303: See Other() 对应当前请求的响应可以在另一个URI上被找到，应使用get方法定向获取请求资源
 *          304: Not Modified(未修改的) 客户端发送带条件的请求，服务端允许请求访问资源，但因发生请求未满足条件后，直接返回304
 *          307: Temporary Redirect(临时重定向)：与302含义相同
 *          400: Bad Request(错误请求):请求报文中存在语法错误。需修改内容后，再次发送请求
 *          401: Unauthorized(未经授权的)：发送请求需要有HTTP认证的认证信息
 *          403: Forbidden(被禁止的)：访问资源的请求被服务器拒绝
 *          404: Not Found(找不到)：服务器上无法找到请求资源
 *          500: Internal Server Error(内部服务器错误)： 服务器端在执行请求时发生错误
 *          503: Service Unavailable(服务不可用)：服务器处于超负载或者停机维护阶段，现在无法处理请求
 *
 * 延伸考点：OSI七层模型
 *      物理层 ：建立、维护、断开无力连接
 *      数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能
 *      网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。
 *      传输层：定义传输数据的协议端口号，以及流控和差错校验
 *              协议有：TCP UDP,数据包一旦离开网卡即进入网络传输层
 *      会话层：建立、管理、终止会话
 *      表示层：数据的表示、安全、压缩
 *      应用层：网络服务与最终用户的一个接口
 *              协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POPS DHCP
 *
 * 延伸考点：HTTP协议的工作特点和工作原理
 *      工作特点：
 *          基本B/S模式
 *          通信开销小、简单快速、传输成本低
 *          使用灵活、可使用超文本传输协议
 *          节省传输时间
 *          无状态
 *      工作原理：
 *          客户端发送请求给服务器，创建一个TCP连接，指定端口号，默认80，连接服务器
 *          ，服务器监听浏览器请求，一旦监听到客户端请求，分析请求类型后，服务器会向
 *          客户端返回状态信息和数据内容。
 *
 * 延伸考点：HTTP协议常见请求/响应头
 *      Content-Type 请求到与实体相对应的MIME信息
 *      Accept 指定客户端能接受的类型
 *      Origin 最初的请求来源于哪，主要用于post请求
 *      Cookie HTTP请求发起时，发送给客户端的cookie值
 *      Cache-Cotrol 指定请求和响应的缓存机制
 *      User-Agent 用户信息
 *      Referrer 上级请求路径
 *      X-Forwarded-For 请求端真实的ip
 *      Access-Control-Allow-Origin 允许特定域名进行访问，通常跨域时来使用
 *      Last-Modified 请求资源的最后响应时间
 *
 * HTTP协议的请求方法
 *      （常用于查看）GET：向特定资源发出请求
 *      （常用于创建）POST：向特定资源提交数据进行处理请求(例如提交表单或者上传文件)
 *      HEAD: 向服务器索要与GET请求相一致的响应，只不过响应体不会被返回。
 *            可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息
 *      OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送'*'的请求来测试服务器的功能性。
 *      （常用于修改）PUT：向指定资源位置上传其最新内容
 *      （删除）DELETE：请求服务器删除Request-URI所标识的资源
 *      TRACE：回显服务器收到的请求，主要用于测试或诊断
 *
 *      HTTP协议的GET和POST请求方法的区别
 *          1. 在做后退和刷新操作是，GET没太大变化，无害的；POST数据就会被重新提交
 *          2. GET可以收藏为书签；POST不可能收藏为书签
 *          3. GET请求可以被浏览器缓存；POST不能被浏览器缓存
 *          4. GET请求时的编码类型是application/x-www-form-urlencoded；
 *              POST请求时，除了以上这种，还有multipart/form-data(当type=file时用)，为二进制数据使用编码
 *          5. 在历史记录中，GET请求参数会保留；POST参数不会存在历史中。
 *          6. 数据限制，GET中数据长度最大2048个字符；POST无数据限制
 *          7. 数据类型限制，GET只允许ASCII字符（GET只允许GB2312）；POST无限制，也允许二进制数据。
 *          8. 安全性，GET安全性差；POST较安全，参数不会被保存在浏览器历史或者web服务器日志中。
 *          9. 可见性，GET在URL中对所有人可见；POST数据不会显示在URL中
 *
 * 延伸考点：HTTPS的工作原理
 *      HTTPS是一种基于SSL/TLS的HTTP协议，所有的HTTP数据都是在SSL/TLS协议封装之上传输的。
 *      HTTPS协议在HTTP协议的基础上，添加了SSL/TLS握手及数据加密传输，也属于应用层协议。
 *
 * 延伸考点：常见网络协议含义及端口
 *      FTP：文件传输协议（上传文件，下载主页）  默认端口：21
 *      Telnet：用于远程登录的端口，用户可以远程连接到计算机上，提供基于DOS下的通讯服务  默认端口：23
 *      SMTP：简单邮件传输协议   默认端口：25
 *      POP3：主要用于接受邮件   默认端口：110
 *      HTTP：超文本传输协议    默认端口：80
 *      DNS：域名解析协议     默认端口 53
 *
 * 解题方法：
 *      理解并牢记以上的知识点
 *
 * 一网打尽
 *      我们常见的HTTP协议、TCP协议分别位于OSI网络模型的第几层？
 *      答：  第七层应用层   第四层传输层
 *
 *
 *
 */


